# Publish nuget package

jobs:
- job: Publish
  displayName: 'Publish Nuget'
  pool:
    vmImage: 'windows-latest'
  variables:
    rbfxFolder: $(Build.SourcesDirectory)/rbfx
    buildFolder: $(Build.SourcesDirectory)/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget

  steps:
  - template: Install-DotNet.yaml
  
  - script: dotnet tool run ezpipeline git-height-version -i '$(Build.SourcesDirectory)/.azurepipelines/version.txt' -b 0.3.7.320 --variable VERSION
    displayName: 'Generate version environment variable'

  - task: NuGetToolInstaller@1
    inputs:
      checkLatest: true

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'win-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'osx-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'linux-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'win-x64-uap-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'win-ARM64-uap-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'android-GLES3-armeabi-v7a-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'android-GLES3-arm64-v8a-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'android-GLES3-x86-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'android-GLES3-x86_64-nuget'

  # - template: Fetch-NugetArtifact.yaml
  #   parameters:
  #     artifact: 'android-jar-nuget'

  - template: Fetch-NugetArtifact.yaml
    parameters:
      artifact: 'ios-nuget'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/nuget'
      contents: 'LICENSE' 
      targetFolder: '$(nugetFolder)'
      overWrite: true

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/nuget/build'
      contents: '**' 
      targetFolder: '$(nugetFolder)/build'
      overWrite: true

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/nuget'
      contents: 'unofficial.Urho3DNet.nuspec' 
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      overWrite: true

  - task: NuGetCommand@2
    inputs:
      command: 'pack'
      packagesToPack: '$(Build.ArtifactStagingDirectory)/unofficial.Urho3DNet.nuspec'
      includeSymbols: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'VERSION'

  - task: NuGetCommand@2
    displayName: 'Publish to local feed'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '$(VstsFeed)'
      allowPackageConflicts: true

  - task: NuGetCommand@2
    displayName: 'Publish symbols to local feed'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '$(VstsFeed)'
      allowPackageConflicts: true

  - task: NuGetCommand@2
    displayName: 'Publish to nuget.org'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      publishFeedCredentials: 'rbfx_nuget_org'
      nuGetFeedType: 'external'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'VERSION'
      allowPackageConflicts: true

  - template: Send-Notification.yaml
    parameters:
      message: 'New nuget $(VERSION) published https://www.nuget.org/packages/unofficial.Urho3DNet/$(VERSION)'
