# Build project for Windows
parameters:
  configuration: 'RelWithDebInfo'

jobs:
- job: Build_Windows
  displayName: 'Build Windows'
  timeoutInMinutes: 90
  pool:
    vmImage: 'windows-2019'
  variables:
    rbfxFolder: $(Agent.BuildDirectory)/s/rbfx
    buildFolder: $(Agent.BuildDirectory)/s/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget
    CCACHE_DIR: $(Build.BuildDirectory)/__ccache

  steps:
  - checkout: self
    submodules: true
    displayName: 'Checkout project'

  - template: Add-ToolsToPath.yaml

  - pwsh: New-Item -Path "$(Build.CCACHE_DIR)" -ItemType "directory"

  - task: Cache@2 
    displayName: 'Restore compiler cache'
    inputs:
      key: ccache | "v0.0.1" | "$(Agent.OS)" | "Windows" | "${{ parameters.configuration }}"
      path: '$(CCACHE_DIR)'

  # - task: DotNetCoreCLI@2
  #   displayName: 'Restore'
  #   inputs:
  #     command: restore
  #     projects: 'temp/xamarin_compatibility/xamarin_compatibility.csproj'

  # - task: MSBuild@1
  #   displayName: 'test xamarin compatibility'
  #   inputs:
  #     solution: 'temp/xamarin_compatibility/xamarin_compatibility.sln'
  #     configuration: Release

  - template: Build-rbfx.yaml
    parameters:
      buildDotNet: true
      cmakeExtraArgs: -G "Ninja" -A x64 -DCMAKE_BUILD_TYPE=${{ parameters.configuration }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DURHO3D_GRAPHICS_API=D3D11 -DSWIG_MODULE_Urho3D_DLLIMPORT=Urho3D -DSWIG_MODULE_ImGui_DLLIMPORT=Urho3D
      configuration: ${{ parameters.configuration }}

  - task: CMake@1
    displayName: 'Build Urho3DNet.Desktop'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config RelWithDebInfo --target Urho3DNet.Desktop

  - task: CMake@1
    displayName: 'Build Urho3DNet.UWP'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config RelWithDebInfo --target Urho3DNet.UWP

  - task: CMake@1
    displayName: 'Build Urho3DNet.IOS'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config RelWithDebInfo --target Urho3DNet.IOS

  - task: CMake@1
    displayName: 'Build Urho3DNet.Android'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config RelWithDebInfo --target Urho3DNet.Android

  # New-Item -ItemType Directory -Path $(nugetFolder)/runtimes/win-x64/native/ -Force
  # copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll $(nugetFolder)/runtimes/win-x64/native/Urho3D.dll -Force
  # copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb $(nugetFolder)/runtimes/win-x64/native/Urho3D.pdb -Force

  - pwsh: ccache --show-stats --verbose
    displayName: 'CCache stats'

  - pwsh: |
      function CopyFiles {
          param ([string]$SourcePath, [string]$DestinationPath)

          New-Item -ItemType Directory -Path "$DestinationPath" -Force

          $files = Get-ChildItem $SourcePath
          foreach ($file in $files)
          {
            $fileName = Join-Path -Path $DestinationPath -ChildPath $file.Name 
            copy-item $file.FullName $fileName -Force
          }
      }
      
      # Native DLL
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll -DestinationPath $(nugetFolder)/native/win/x64/
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb -DestinationPath $(nugetFolder)/native/win/x64/

      # .Net Standard 2.0 assembly
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/netstandard2.0

      # .Net 4.6 assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/net46/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/net46
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.Desktop.??? -DestinationPath $(nugetFolder)/lib/net46

      # .Net 4.7 assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/net47/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/net47
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.Desktop.??? -DestinationPath $(nugetFolder)/lib/net47

      # .Net Core 2.1 assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netcoreapp2.1/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/netcoreapp2.1
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.Desktop.??? -DestinationPath $(nugetFolder)/lib/netcoreapp2.1

      # Xamarin.IOS assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3DNet.IOS.??? -DestinationPath $(nugetFolder)/lib/xamarin.ios10

      # Xamarin.Android assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/monoandroid90/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/monoandroid90
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3DNet.Android.??? -DestinationPath $(nugetFolder)/lib/monoandroid90

      # UWP assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.UWP.??? -DestinationPath $(nugetFolder)/lib/uap10.0

    displayName: 'Copy binary to output'

  - pwsh: |
      $path = "$(buildFolder)\Source\Urho3D\Urho3DCSharp";
      Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
        $content = Get-Content -path $path\$_ -Raw
        $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
        $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
        $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
        $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

        If ($content -ne $newContent)
        {
          Write-Host "DllImport updated in $path\$_"
          $newContent | Set-Content -Path $path\$_
        }
      }

      $path = "$(buildFolder)\Source\Urho3D\ImGuiCSharp";
      Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
        $content = Get-Content -path $path\$_ -Raw
        $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
        $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
        $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
        $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

        If ($content -ne $newContent)
        {
          Write-Host "DllImport updated in $path\$_"
          $newContent | Set-Content -Path $path\$_
        }
      }
      Remove-Item -Path "$(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10" -Recurse -Force
    displayName: 'Replace DllImport'

  - task: NuGetCommand@2
    displayName: 'Restore rbfx dependencies'
    inputs:
      command: 'restore'
      restoreSolution: '$(buildFolder)/*.sln'

  - task: MSBuild@1
    displayName: 'Build Urho3DNet for iOS'
    inputs:
      solution: '$(buildFolder)/*.sln'
      #msbuildLocationMethod: 'version' # Optional. Options: version, location
      #msbuildVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
      #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
      #msbuildLocation: # Optional
      #platform: # Optional
      configuration: ${{ parameters.configuration }}
      msbuildArguments: /p:TargetFramework=xamarin.ios10 -target:Urho3DNet
      #clean: true
      #maximumCpuCount: false # Optional
      #restoreNugetPackages: false # Optional
      #logProjectEvents: false # Optional
      #createLogFile: false # Optional
      #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic

  # - script: |
  #    msbuild /p:TargetFramework=xamarin.ios10 /p:Configuration=${{ parameters.configuration }} $(rbfxFolder)\Source\Urho3D\CSharp\Urho3DNet.csproj
  #   displayName: 'Build Urho3DNet for iOS'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/xamarin.ios10/ -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.dll $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.pdb $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.pdb -Force
    displayName: 'Copy binary to output'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(rbfxFolder)/bin/CoreData'
      contents: '**' 
      targetFolder: '$(nugetFolder)/content/CoreData'
      overWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish game binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'win-nuget'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish swig'
    inputs:
      targetPath: '$(buildFolder)/bin/${{ parameters.configuration }}/swig.exe'
      artifactName: 'win-swig'
