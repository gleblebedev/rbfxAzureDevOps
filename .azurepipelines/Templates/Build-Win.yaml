# Build project for Windows
parameters:
  configuration: 'RelWithDebInfo'
  enableCache: true
  debugCache: false

jobs:
- job: Build_Windows
  displayName: 'Build Windows'
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-latest'
  variables:
    rbfxFolder: $(Build.SourcesDirectory)/rbfx
    buildFolder: $(Build.SourcesDirectory)/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget

  steps:
  - checkout: self
    submodules: true
    displayName: 'Checkout project'

  - template: Add-ToolsToPath.yaml

  - script: dotnet ezpipeline winsdkenv --build-platform x64
    displayName: 'Setup Windows SDK Environment'

  - script: dotnet ezpipeline vsenv --build-platform x64
    displayName: 'Setup Visual Studio Environment'

  - template: Fetch-CCache.yaml
    parameters:
      enableCache:  ${{ parameters.enableCache }}
      debugCache:  ${{ parameters.debugCache }}

  - template: Build-rbfx.yaml
    parameters:
      enableCache:  ${{ parameters.enableCache }}
      debugCache:  ${{ parameters.debugCache }}
      buildDotNet: true
      buildEditor: true
      cmakeExtraArgs: >-
        -DCMAKE_BUILD_TYPE=${{ parameters.configuration }}
        -DURHO3D_GRAPHICS_API=D3D11
        -DSWIG_MODULE_Urho3D_DLLIMPORT=Urho3D
        -DSWIG_MODULE_ImGui_DLLIMPORT=Urho3D
        -DURHO3D_PCH=Off
        -DCMAKE_C_COMPILER="$(CMAKE_C_COMPILER)"
        -DCMAKE_CXX_COMPILER="$(CMAKE_CXX_COMPILER)"
        -DURHO3D_EDITOR=ON
      configuration: ${{ parameters.configuration }}

  - script: dotnet build Urho3DNet.Desktop.csproj -p:TargetFramework=net7.0 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/ -p:BaseOutputPath=$(buildFolder)/bin/${{ parameters.configuration }}/
    displayName: 'Build Urho3DNet.Desktop'
    workingDirectory: '$(rbfxFolder)/Source/Urho3D/CSharpPlatforms/Urho3DNet.Desktop'

  - task: CMake@1
    displayName: 'Build Urho3DNet.UWP'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config ${{ parameters.configuration }} --target Urho3DNet.UWP

  - script: dotnet build Urho3DNet.IOS.csproj -p:TargetFramework=net7.0-ios -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/ -p:BaseOutputPath=$(buildFolder)/bin/${{ parameters.configuration }}/
    displayName: 'Build Urho3DNet.IOS'
    workingDirectory: '$(rbfxFolder)/Source/Urho3D/CSharpPlatforms/Urho3DNet.IOS'

  - script: dotnet build Urho3DNet.Android.csproj -p:TargetFramework=net7.0-android -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/ -p:BaseOutputPath=$(buildFolder)/bin/${{ parameters.configuration }}/
    displayName: 'Build Urho3DNet.Android'
    workingDirectory: '$(rbfxFolder)/Source/Urho3D/CSharpPlatforms/Urho3DNet.Android'

  - pwsh: |
      $managedDllFolder = "$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp/bin/${{ parameters.configuration }}"

      function CopyFiles {
          param ([string]$SourcePath, [string]$DestinationPath)

          New-Item -ItemType Directory -Path "$DestinationPath" -Force

          $files = Get-ChildItem $SourcePath
          foreach ($file in $files)
          {
            $fileName = Join-Path -Path $DestinationPath -ChildPath $file.Name 
            copy-item $file.FullName $fileName -Force
          }
      }
      
      # Java sources
      Copy-Item -Path $(Build.SourcesDirectory)/android/java/rbfxsdl/src/main/java/ -Destination $(nugetFolder)/native/android/java/ -Recurse -Force

      # Native DLL
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll -DestinationPath $(nugetFolder)/native/win/x64/
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb -DestinationPath $(nugetFolder)/native/win/x64/

      # .Net Standard 2.0 assembly
      CopyFiles -SourcePath $(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/netstandard2.0

      # .Net 7.0 assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/net7.0/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/net7.0
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/net7.0/Urho3DNet.Desktop.??? -DestinationPath $(nugetFolder)/lib/net7.0

      # iOS temporally disabled
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3DNet.IOS.??? -DestinationPath $(nugetFolder)/lib/net7.0-ios16.0
      dotnet tool run ezpipeline patch-dllimport --input $(buildFolder)/bin/${{ parameters.configuration }}/net7.0-ios/Urho3DNet.dll -v __Internal -o $(nugetFolder)/lib/net7.0-ios16.0/Urho3DNet.dll

      # Xamarin.Android assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/net7.0-android/Urho3DNet.??? -DestinationPath $(nugetFolder)/lib/net7.0-android31.0
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/Urho3DNet.Android.??? -DestinationPath $(nugetFolder)/lib/net7.0-android31.0

      # UWP assemblies
      CopyFiles -SourcePath $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.UWP.??? -DestinationPath $(nugetFolder)/lib/uap10.0

    displayName: 'Copy binary to output'

  # - pwsh: |
  #     $path = "$(buildFolder)\Source\Urho3D\Urho3DCSharp";
  #     Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
  #       $content = Get-Content -path $path\$_ -Raw
  #       $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
  #       $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
  #       $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
  #       $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

  #       If ($content -ne $newContent)
  #       {
  #         Write-Host "DllImport updated in $path\$_"
  #         $newContent | Set-Content -Path $path\$_
  #       }
  #     }

  #     $path = "$(buildFolder)\Source\Urho3D\ImGuiCSharp";
  #     Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
  #       $content = Get-Content -path $path\$_ -Raw
  #       $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
  #       $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
  #       $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
  #       $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

  #       If ($content -ne $newContent)
  #       {
  #         Write-Host "DllImport updated in $path\$_"
  #         $newContent | Set-Content -Path $path\$_
  #       }
  #     }
  #     Remove-Item -Path "$(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10" -Recurse -Force
  #   displayName: 'Replace DllImport'

  # - task: NuGetCommand@2
  #   displayName: 'Restore rbfx dependencies'
  #   inputs:
  #     command: 'restore'
  #     restoreSolution: '$(buildFolder)/*.sln'

  # - task: MSBuild@1
  #   displayName: 'Build Urho3DNet for iOS'
  #   inputs:
  #     solution: '$(buildFolder)/*.sln'
  #     configuration: ${{ parameters.configuration }}
  #     msbuildArguments: /p:TargetFramework=xamarin.ios10 -target:Urho3DNet

  # - script: |
  #    msbuild /p:TargetFramework=xamarin.ios10 /p:Configuration=${{ parameters.configuration }} $(rbfxFolder)\Source\Urho3D\CSharp\Urho3DNet.csproj
  #   displayName: 'Build Urho3DNet for iOS'

  # - pwsh: |
  #     New-Item -ItemType Directory -Path $(nugetFolder)/lib/xamarin.ios10/ -Force
  #     copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.dll $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.dll -Force
  #     copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.pdb $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.pdb -Force
  #   displayName: 'Copy binary to output'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(rbfxFolder)/bin/CoreData'
      contents: '**' 
      targetFolder: '$(nugetFolder)/content/CoreData'
      overWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish game binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'win-nuget'
