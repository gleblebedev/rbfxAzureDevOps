# Build project for UWP
parameters:
  platform: 'x64'
  configuration: 'RelWithDebInfo'
  buildDotNet: true

jobs:
- job: Build_UWP_${{ parameters.platform }}
  displayName: 'Build UWP ${{ parameters.platform }}'
  timeoutInMinutes: 90
  pool:
    vmImage: 'windows-2019'
  variables:
    rbfxFolder: $(Agent.BuildDirectory)/s/rbfx
    buildFolder: $(Agent.BuildDirectory)/s/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget
    CCACHE_DIR: $(Agent.BuildDirectory)/__ccache
    CCACHE_DEBUG: 1

  steps:
  - checkout: self
    submodules: true
    displayName: 'Checkout project'

  - template: Add-ToolsToPath.yaml

  - task: Cache@2 
    displayName: 'Restore compiler cache'
    inputs:
      key: ccache | "v0.0.1" | "$(Agent.OS)" | "$(Agent.JobName)"
      path: '$(CCACHE_DIR)'

  - template: Build-rbfx.yaml
    parameters:
      buildDotNet: ${{ parameters.buildDotNet }}
      cmakeExtraArgs: -G "Ninja" -DCMAKE_SYSTEM_PROCESSOR=x64 -DCMAKE_BUILD_TYPE=${{ parameters.configuration }} -DCMAKE_SYSTEM_NAME=WindowsStore -DURHO3D_GRAPHICS_API=D3D11  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION='10.0' -DVS_WINDOWS_TARGET_PLATFORM_MIN_VERSION='10.0.10240.0' -DSWIG_MODULE_Urho3D_DLLIMPORT=Urho3D -DSWIG_MODULE_ImGui_DLLIMPORT=Urho3D
      configuration: ${{ parameters.configuration }}

  - pwsh: ccache --show-stats
    displayName: 'CCache stats'

  - template: 
    inputs:
      sourceFolder: '$(buildFolder)'
      contents: '**/*.ccache-log'
      targetFolder: '$(Build.ArtifactStagingDirectory)/ccache-log/$(Agent.JobName)/'
    displayName: 'Copy CCache logs'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish CCache logs'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/ccache-log/'
      artifactName: 'ccache-log'

  - pwsh: |
      Get-ChildItem -Path $(buildFolder) -Filter *.dll -Recurse -Name| ForEach-Object {
          Write-Host $_
      }
    displayName: 'Find all *.dll'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/native/uap/${{ parameters.platform }}/ -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll $(nugetFolder)/native/uap/${{ parameters.platform }}/Urho3D.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb $(nugetFolder)/native/uap/${{ parameters.platform }}/Urho3D.pdb -Force
    displayName: 'Copy binary to output'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/uap10.0 -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.dll $(nugetFolder)/lib/uap10.0/Urho3DNet.dll -Force
    displayName: 'Copy .net binary to output'
    condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish game binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'win-${{ parameters.platform }}-uap-nuget'
