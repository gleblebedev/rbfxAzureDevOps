# Build project for UWP
parameters:
  platform: 'x64'
  configuration: 'RelWithDebInfo'
  buildDotNet: true

jobs:
- job: Build_UWP_${{ parameters.platform }}
  displayName: 'Build UWP ${{ parameters.platform }}'
  timeoutInMinutes: 90
  pool:
    vmImage: 'windows-2019'
  variables:
    rbfxFolder: $(Agent.BuildDirectory)/s/rbfx
    buildFolder: $(Agent.BuildDirectory)/s/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget
    compilerPath: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe'
    winSDKPath: 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.16299.0/x64'
    CCACHE_DIR: $(Agent.BuildDirectory)/__ccache
    CCACHE_DEBUG: 1

  steps:
  - checkout: self
    submodules: true
    displayName: 'Checkout project'

  - template: Add-ToolsToPath.yaml

  - script: dotnet $(Agent.BuildDirectory)/s/tools/dotnet/PipelineTools.dll winsdkenv --buildPlatform  ${{ parameters.platform }}
    displayName: 'Setup Windows SDK Environment'

  - script: dotnet $(Agent.BuildDirectory)/s/tools/dotnet/PipelineTools.dll vsenv --buildPlatform  ${{ parameters.platform }}
    displayName: 'Setup Visual Studio Environment'

  - template: Fetch-CCache.yaml

  - template: Build-rbfx.yaml
    parameters:
      buildDotNet: ${{ parameters.buildDotNet }}
      cmakeExtraArgs: >-
        -G "Ninja"
        -DCMAKE_SYSTEM_PROCESSOR=x64
        -DCMAKE_BUILD_TYPE=${{ parameters.configuration }}
        -DCMAKE_CXX_COMPILER:FILEPATH="$(compilerPath)"
        -DCMAKE_C_COMPILER:FILEPATH="$(compilerPath)"
        -DCMAKE_RC_COMPILER:FILEPATH="$(winSDKPath)/rc.exe"
        -DCMAKE_MT:FILEPATH="$(winSDKPath)/mt.exe"
        -DCMAKE_SYSTEM_NAME=WindowsStore
        -DCMAKE_SYSTEM_VERSION='10.0'
        -DURHO3D_GRAPHICS_API=D3D11
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DVS_WINDOWS_TARGET_PLATFORM_MIN_VERSION='10.0.10240.0'
        -DSWIG_MODULE_Urho3D_DLLIMPORT=Urho3D
        -DSWIG_MODULE_ImGui_DLLIMPORT=Urho3D
      configuration: ${{ parameters.configuration }}

  - pwsh: |
      Get-ChildItem -Path $(buildFolder) -Filter *.dll -Recurse -Name| ForEach-Object {
          Write-Host $_
      }
    displayName: 'Find all *.dll'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/native/uap/${{ parameters.platform }}/ -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll $(nugetFolder)/native/uap/${{ parameters.platform }}/Urho3D.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb $(nugetFolder)/native/uap/${{ parameters.platform }}/Urho3D.pdb -Force
    displayName: 'Copy binary to output'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/uap10.0 -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.dll $(nugetFolder)/lib/uap10.0/Urho3DNet.dll -Force
    displayName: 'Copy .net binary to output'
    condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish game binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'win-${{ parameters.platform }}-uap-nuget'
