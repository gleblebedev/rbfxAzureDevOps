# Build Urho3D rbfx fork
parameters:
  buildDotNet: true
  buildEditor: false
  cmakeExtraArgs: ''
  configuration: 'RelWithDebInfo'
  enableCache: true
  debugCache: false
  editorNetVersion: 'net6.0'

steps:
- script: dotnet tool run ezpipeline git-height-version -i $(Build.SourcesDirectory)/.azurepipelines/version.txt -b 0.3.7.320 --variable VERSION
  displayName: 'Generate version environment variable'

- script: dotnet tool run ezpipeline set-msbuild-property -i $(Build.SourcesDirectory)/rbfx/Directory.Build.props -p=Version:$(VERSION)
  displayName: 'Set version to Directory.Build.props'

- pwsh: |
    Write-Host "##vso[task.setvariable variable=CI]ON";
  displayName: 'Set CI environment variable'

- script: dotnet workload install android
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), or(eq('${{ parameters.buildDotNet }}', true), eq('${{ parameters.buildEditor }}', true)))
  displayName: 'Install mobile workloads on Linux'

- script: dotnet workload install android ios
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'), or(eq('${{ parameters.buildDotNet }}', true), eq('${{ parameters.buildEditor }}', true)))
  displayName: 'Install mobile workloads'

- script: mkdir rbfxbuild
  displayName: 'Make rbfxbuild folder'
  workingDirectory: $(Build.SourcesDirectory)
  failOnStderr: true

- task: CMake@1
  displayName: 'Configure Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: -DBUILD_SHARED_LIBS=ON -DURHO3D_COMPUTE=OFF -DURHO3D_GLOW=ON -DURHO3D_FEATURES="CSHARP;SYSTEMUI" -DURHO3D_NETFX=netstandard2.0 -DURHO3D_PROFILING=OFF -DURHO3D_PLAYER=OFF -DURHO3D_EXTRAS=OFF -DURHO3D_TOOLS=OFF -DURHO3D_RMLUI=ON ${{ parameters.cmakeExtraArgs }} $(rbfxFolder)

- script: dotnet restore $(buildFolder)/rbfx.sln
  displayName: 'Restore rbfx dependencies via dotnet'
  continueOnError: true
  condition: and(succeeded(), or(eq('${{ parameters.buildDotNet }}', true), eq('${{ parameters.buildEditor }}', true)))

- task: CMake@1
  displayName: 'Build Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: --build . --config ${{ parameters.configuration }} --target Urho3D --parallel 2

- ${{ if eq(parameters.buildDotNet, true) }}:
  - script: dotnet build Urho3DNet.csproj -p:TargetFramework=netstandard2.0 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
    displayName: 'Build Urho3DNet netstandard2.0'
    workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

  - script: dotnet build Urho3DNet.csproj -p:TargetFramework=net7.0 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
    displayName: 'Build Urho3DNet Net7.0'
    workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

  - script: dotnet build Urho3DNet.csproj -p:TargetFramework=net7.0-android -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
    displayName: 'Build Urho3DNet net7.0-android'
    workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

  - script: dotnet build Urho3DNet.csproj -p:TargetFramework=net7.0-ios -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
    displayName: 'Build Urho3DNet net7.0-ios'
    workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

- ${{ if eq(parameters.buildEditor, true) }}:
  - task: CMake@1
    displayName: 'Build libEditor'
    inputs:
      workingDirectory: '$(buildFolder)'
      cmakeArgs: --build . --config ${{ parameters.configuration }} --target libEditor --parallel 2

  - script: |
      strip ./libEditor.so
      strip ./libUrho3D.so
    displayName: 'Strip .so'
    workingDirectory: '$(buildFolder)/bin'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    failOnStderr: true

  - script: dotnet build Editor.csproj -p:URHO3D_NETFX=netstandard2.0 -p:URHO3D_NETFX_RUNTIME=${{ parameters.editorNetVersion }} -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/ -p:GeneratePackageOnBuild=true
    displayName: 'Build unofficial.Urho3DNet.Editor'
    workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Editor/ManagedHost'

  - script: |
      dotnet tool run ezpipeline resolve-path -i $(Build.SourcesDirectory)/rbfx/Source/Editor/ManagedHost/**/unofficial.Urho3DNet.Editor.*.nupkg -v NupkgPath
      dotnet tool run ezpipeline resolve-path -i $(Build.SourcesDirectory)/rbfxbuild/bin/**/libEditor* -t 1 -d -v LibEditorPath
    displayName: 'Find nuget'
    workingDirectory: '$(Build.SourcesDirectory)/'

  - script: |
      dotnet tool run ezpipeline append-zip -i $(Build.SourcesDirectory)/rbfx/bin/EditorData/ -o $(NupkgPath) -s tools/${{ parameters.editorNetVersion }}/any/EditorData
      dotnet tool run ezpipeline append-zip -i $(Build.SourcesDirectory)/rbfx/bin/CoreData/ -o $(NupkgPath) -s tools/${{ parameters.editorNetVersion }}/any/CoreData
      dotnet tool run ezpipeline append-zip -i $(LibEditorPath) -f libEditor\. -o $(NupkgPath) -s tools/${{ parameters.editorNetVersion }}/any/
      dotnet tool run ezpipeline append-zip -i $(LibEditorPath) -f Urho3D\. -o $(NupkgPath) -s tools/${{ parameters.editorNetVersion }}/any/
    displayName: 'Append files to Editor nuget'
    workingDirectory: '$(Build.SourcesDirectory)/'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Editor nuget to $(Agent.OS)/EditorNuget'
    inputs:
      targetPath: '$(NupkgPath)'
      artifactName: '$(Agent.OS)_EditorNuget'

- template: Publish-CCacheLog.yaml
  parameters:
    enableCache:  ${{ parameters.enableCache }}
    debugCache:  ${{ parameters.debugCache }}
