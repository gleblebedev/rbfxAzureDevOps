# Build Urho3D rbfx fork
parameters:
  buildDotNet: true
  cmakeExtraArgs: ''
  configuration: 'RelWithDebInfo'
  enableCache: true
  debugCache: false

steps:
- task: PowerShell@2
  displayName: 'Generate version environment variable'
  inputs:
    filePath: '$(Build.SourcesDirectory)/.azurepipelines/Scripts/GenVersion.ps1'
    arguments: '-versionTemplateFile $(Build.SourcesDirectory)/.azurepipelines/version.txt'

- pwsh: |
    Write-Host "##vso[task.setvariable variable=CI]ON";
  displayName: 'Set CI environment variable'

- script: dotnet workload install android
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  displayName: 'Install workload android'

- script: mkdir rbfxbuild
  displayName: 'Make rbfxbuild folder'
  workingDirectory: $(Build.SourcesDirectory)
  failOnStderr: true

- task: CMake@1
  displayName: 'Configure Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: -DBUILD_SHARED_LIBS=ON -DURHO3D_COMPUTE=OFF -DURHO3D_GLOW=ON -DURHO3D_FEATURES="CSHARP;SYSTEMUI" -DURHO3D_NETFX=netstandard2.0 -DURHO3D_PROFILING=OFF -DURHO3D_PLAYER=OFF -DURHO3D_EXTRAS=OFF -DURHO3D_TOOLS=OFF -DURHO3D_RMLUI=ON ${{ parameters.cmakeExtraArgs }} $(rbfxFolder)

- task: NuGetCommand@2
  displayName: 'Restore rbfx dependencies'
  continueOnError: true
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  inputs:
    command: 'restore'
    restoreSolution: '$(buildFolder)/*.sln'

- script: dotnet restore $(buildFolder)/rbfx.sln
  displayName: 'Restore rbfx dependencies via dotnet'
  continueOnError: true
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))

- task: CMake@1
  displayName: 'Build Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: --build . --config ${{ parameters.configuration }} --target Urho3D --parallel 2

- script: dotnet build Urho3DNet.csproj -p:TargetFramework=netstandard2.0 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
  displayName: 'Build Urho3DNet netstandard2.0'
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

- script: dotnet build Urho3DNet.csproj -p:TargetFramework=net7.0 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
  displayName: 'Build Urho3DNet Net7.0'
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

- script: dotnet build Urho3DNet.csproj -p:TargetFramework=net7.0-android -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
  displayName: 'Build Urho3DNet net7.0-android'
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

# - script: dotnet build Urho3DNet.csproj -p:TargetFramework=xamarin.ios10 -p:Configuration=${{ parameters.configuration }} -p:GeneratedCodePath=$(buildFolder)/Source/Urho3D/
#   displayName: 'Build Urho3DNet xamarin.ios10'
#   condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
#   workingDirectory: '$(Build.SourcesDirectory)/rbfx/Source/Urho3D/CSharp'

- template: Publish-CCacheLog.yaml
  parameters:
    enableCache:  ${{ parameters.enableCache }}
    debugCache:  ${{ parameters.debugCache }}
