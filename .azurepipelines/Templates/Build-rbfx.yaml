# Build Urho3D rbfx fork
parameters:
  buildDotNet: true
  cmakeExtraArgs: ''
  configuration: 'RelWithDebInfo'
  enableCache: true
  debugCache: false

steps:
- task: PowerShell@2
  displayName: 'Generate version environment variable'
  inputs:
    filePath: '$(Build.SourcesDirectory)/.azurepipelines/Scripts/GenVersion.ps1'
    arguments: '-versionTemplateFile $(Build.SourcesDirectory)/.azurepipelines/version.txt'

- pwsh: |
    Write-Host "##vso[task.setvariable variable=CI]ON";
  displayName: 'Set CI environment variable'

- script: mkdir rbfxbuild
  displayName: 'Make rbfxbuild folder'
  workingDirectory: $(Build.SourcesDirectory)
  failOnStderr: true

- task: CMake@1
  displayName: 'Configure Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: -DBUILD_SHARED_LIBS=ON -DURHO3D_COMPUTE=OFF -DURHO3D_GLOW=ON -DURHO3D_FEATURES="CSHARP;SYSTEMUI" -DURHO3D_NETFX=netstandard2.0 -DURHO3D_PROFILING=OFF -DURHO3D_PLAYER=OFF -DURHO3D_EXTRAS=OFF -DURHO3D_TOOLS=OFF -DURHO3D_RMLUI=ON ${{ parameters.cmakeExtraArgs }} $(rbfxFolder)

- task: NuGetCommand@2
  displayName: 'Restore rbfx dependencies'
  continueOnError: true
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  inputs:
    command: 'restore'
    restoreSolution: '$(buildFolder)/*.sln'

- task: CMake@1
  displayName: 'Build Urho3D'
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: --build . --config RelWithDebInfo --target Urho3D

- task: CMake@1
  displayName: 'Build Urho3DNet'
  condition: and(succeeded(), ne('${{ parameters.buildDotNet }}', 'true'))
  inputs:
    workingDirectory: '$(buildFolder)'
    cmakeArgs: --build . --config RelWithDebInfo --target Urho3DNet


- template: Publish-CCacheLog.yaml
  parameters:
    enableCache:  ${{ parameters.enableCache }}
    debugCache:  ${{ parameters.debugCache }}
