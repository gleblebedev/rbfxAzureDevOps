parameters:
  abi: 'arm64-v8a'
  name: 'Build_Android'
  gradle: '6.5.1'
  cmake: '3.19.7'

jobs:

- job: '${{ parameters.name }}'
  displayName: 'Build Android GLES3 ${{ parameters.abi }}'
  pool:
    vmImage: 'ubuntu-22.04'
  variables:
    rbfxFolder: $(Build.SourcesDirectory)/rbfx
    gradleFolder: $(Build.SourcesDirectory)/android/java
    buildFolder: $(Build.SourcesDirectory)/android/java/app/.cxx
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget
    sdkFolder: $(Build.ArtifactStagingDirectory)/sdk

  steps:
  - checkout: self
    submodules: recursive
    displayName: 'Checkout project'

  - task: UseDotNet@2
    displayName: 'Install .NET 7 SDK'
    inputs:
      packageType: 'sdk'
      version: '7.0.x'
      
  - script: |
      dotnet tool restore
    displayName: 'Restore dotnet tools'
    workingDirectory: $(Build.SourcesDirectory)

  - template: Install-LinuxLibs.yaml

  - template: Fetch-CCache.yaml
    parameters:
      enableCache: true
      debugCache: true

  - pwsh: |
      dotnet tool run ezpipeline -- unzip-blob --connection-string "$(CCACHE_BLOB_CONNECTION_STRING)" -o "$(sdkFolder)" -c sdk -n "linux.zip"
      Write-Host "##vso[task.setvariable variable=URHO3D_SDK]$(sdkFolder)"
    displayName: 'Setup SDK'

  - script: |
      sudo apt-get install -y wget tar openjdk-11-jdk android-sdk unzip tree
      sudo chmod -R a+rw /usr/lib/android-sdk/
    displayName: 'Install openjdk-11-jdk android-sdk'

  - script: |
      dotnet tool run ezpipeline -- fetch-tool --name Gradle --path --version ${{ parameters.gradle }}
    displayName: 'Setup Gradle'

  - script: |
      dotnet tool run ezpipeline -- fetch-tool --name CMake --path --version ${{ parameters.cmake }}
    displayName: 'Setup CMake'

  - script: |
      dotnet tool run ezpipeline -- fetch-tool --name AndroidSDKManager --output /usr/lib/android-sdk/ --path --version 7583922
      yes | /usr/lib/android-sdk/cmdline-tools/bin/sdkmanager --licenses --sdk_root=/usr/lib/android-sdk/
      /usr/lib/android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=/usr/lib/android-sdk/ --install "patcher;v4"
    displayName: 'Setup SDKManager'

  - pwsh: Write-Host "##vso[task.setvariable variable=ANDROID_SDK_ROOT]/usr/lib/android-sdk/"
    displayName: 'Set ANDROID_SDK_ROOT'

  - bash: cmake --version
    displayName: 'CMake Version'

  - bash: $(Build.SourcesDirectory)/gradle-${{ parameters.gradle }}/bin/gradle --version
    displayName: 'Gradle Version'

  - bash: $(Build.SourcesDirectory)/gradle-${{ parameters.gradle }}/bin/gradle wrapper
    displayName: 'gradle wrapper'
    workingDirectory: $(Build.SourcesDirectory)/android/java

  - bash: $(Build.SourcesDirectory)/gradle-${{ parameters.gradle }}/bin/gradle assembleRelease -Parm64-v8a -PGLES3 --stacktrace --scan --debug
    displayName: 'gradle assembleRelease'
    workingDirectory: $(Build.SourcesDirectory)/android/java

  - template: Publish-CCacheLog.yaml

  - pwsh: |
      Get-ChildItem -Path $(gradleFolder) -Filter *.so -Recurse -File -Name| ForEach-Object {
          Write-Host $_
      }
    displayName: 'Find all *.so'

  - pwsh: |
      Get-ChildItem -Path $(gradleFolder) -Filter *.jar -Recurse -File -Name| ForEach-Object {
          Write-Host $_
      }
    displayName: 'Find all *.jar'

  - pwsh: |
      New-Item -ItemType File -Path $(nugetFolder)/native/android/GLES3/${{ parameters.abi }}/libUrho3D.so -Force
      copy-item $(gradleFolder)/app/build/intermediates/stripped_native_libs/release/out/lib/${{ parameters.abi }}/libUrho3D.so $(nugetFolder)/native/android/GLES3/${{ parameters.abi }}/libUrho3D.so -Force

      New-Item -ItemType File -Path $(Build.ArtifactStagingDirectory)/jar/classes.jar -Force
      copy-item $(gradleFolder)/rbfxsdl/build/intermediates/runtime_library_classes_jar/release/classes.jar $(Build.ArtifactStagingDirectory)/jar/classes.jar -Force
    displayName: 'Copy *.so to output'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'android-GLES3-${{ parameters.abi }}-nuget'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish jar'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/jar'
      artifactName: 'android-GLES3-${{ parameters.abi }}-jar'

# - job: '${{ parameters.name }}'
#   displayName: 'Build Android GLES3 ${{ parameters.abi }}'
#   pool:
#     vmImage: 'ubuntu-latest'
#   container:
#     image: 'pipelines/android_dev'
#     endpoint: gloomproject-container-registry
#   variables:
#     rbfxFolder: $(Build.SourcesDirectory)/rbfx
#     gradleFolder: $(Build.SourcesDirectory)/android/java
#     buildFolder: $(Build.SourcesDirectory)/android/java/app/.cxx
#     nugetFolder: $(Build.ArtifactStagingDirectory)/nuget
#     sdkFolder: $(Build.ArtifactStagingDirectory)/sdk

#   steps:
#   - checkout: self
#     submodules: recursive
#     displayName: 'Checkout project'

#   - template: Fetch-CCache.yaml
#     parameters:
#       enableCache: true
#       debugCache: true

#   - task: UseDotNet@2
#     displayName: 'Install .NET 7 SDK'
#     inputs:
#       packageType: 'sdk'
#       version: '7.0.x'
      
#   - script: dotnet tool restore
#     displayName: 'Restore dotnet tools'
#     workingDirectory: $(Build.SourcesDirectory)

#   - pwsh: |
#       dotnet tool run ezpipeline -- unzip-blob --connection-string "$(CCACHE_BLOB_CONNECTION_STRING)" -o "$(sdkFolder)" -c sdk -n "linux.zip"
#       Write-Host "##vso[task.setvariable variable=URHO3D_SDK]$(sdkFolder)"
#     displayName: 'Setup SDK'

#   - bash: cmake --version
#     displayName: 'CMake Version'

#   - bash: gradle wrapper
#     displayName: 'gradle wrapper for SDL activity'
#     workingDirectory: $(Build.SourcesDirectory)/android/java

#   - task: Gradle@2
#     displayName: 'gradle build SDL activity'
#     inputs:
#       options: -P${{ parameters.abi }} -PGLES3 --stacktrace --scan
#       workingDirectory: android/java
#       gradleWrapperFile: android/java/gradlew
#       gradleOptions: -Xmx3072m
#       publishJUnitResults: false
#       tasks: assembleRelease

#   - template: Publish-CCacheLog.yaml

#   - pwsh: |
#       Get-ChildItem -Path $(gradleFolder) -Filter *.so -Recurse -File -Name| ForEach-Object {
#           Write-Host $_
#       }
#     displayName: 'Find all *.so'

#   - pwsh: |
#       Get-ChildItem -Path $(gradleFolder) -Filter *.jar -Recurse -File -Name| ForEach-Object {
#           Write-Host $_
#       }
#     displayName: 'Find all *.jar'

#   - pwsh: |
#       New-Item -ItemType File -Path $(nugetFolder)/native/android/GLES3/${{ parameters.abi }}/libUrho3D.so -Force
#       copy-item $(gradleFolder)/app/build/intermediates/stripped_native_libs/release/out/lib/${{ parameters.abi }}/libUrho3D.so $(nugetFolder)/native/android/GLES3/${{ parameters.abi }}/libUrho3D.so -Force

#       New-Item -ItemType File -Path $(Build.ArtifactStagingDirectory)/jar/classes.jar -Force
#       copy-item $(gradleFolder)/rbfxsdl/build/intermediates/runtime_library_classes_jar/release/classes.jar $(Build.ArtifactStagingDirectory)/jar/classes.jar -Force
#     displayName: 'Copy *.so to output'

#   - task: PublishPipelineArtifact@1
#     displayName: 'Publish binaries'
#     inputs:
#       targetPath: '$(nugetFolder)'
#       artifactName: 'android-GLES3-${{ parameters.abi }}-nuget'

#   - task: PublishPipelineArtifact@1
#     displayName: 'Publish jar'
#     inputs:
#       targetPath: '$(Build.ArtifactStagingDirectory)/jar'
#       artifactName: 'android-GLES3-${{ parameters.abi }}-jar'