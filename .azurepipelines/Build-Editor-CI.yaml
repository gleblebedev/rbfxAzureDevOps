#Azure DevOps yaml script to build and publish rbfx game on 2 platforms

trigger: none
#- master

stages:
- stage: Editor_Build
  displayName: Windows Editor Build
  jobs:
  - job: Build_Windows
    displayName: 'Windows Editor Build'
    pool:
      vmImage: 'windows-latest'
    variables:
      rbfxFolder: $(Agent.BuildDirectory)/s/rbfx
      buildFolder: $(Agent.BuildDirectory)/s/rbfxbuild
      nugetFolder: $(Build.ArtifactStagingDirectory)/nuget

    steps:
    - checkout: self
      submodules: true
      displayName: 'Checkout project'

    - template: Templates/Add-ToolsToPath.yaml

    - task: PowerShell@2
      displayName: 'Generate version environment variable'
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/.azurepipelines/Scripts/GenVersion.ps1'
        arguments: '-versionTemplateFile $(Agent.BuildDirectory)/s/.azurepipelines/version.txt'

    - script: mkdir rbfxbuild
      displayName: 'Make rbfxbuild folder'
      workingDirectory: $(Agent.BuildDirectory)/s
      failOnStderr: true

    - task: CMake@1
      displayName: 'Configure Urho3D'
      inputs:
        workingDirectory: '$(buildFolder)'
        cmakeArgs: -DBUILD_SHARED_LIBS=OFF -DURHO3D_GLOW=OFF -DURHO3D_FEATURES="SYSTEMUI" -DURHO3D_PROFILING=OFF -DURHO3D_PLAYER=OFF -DURHO3D_EXTRAS=OFF -DURHO3D_TOOLS=ON -DURHO3D_RMLUI=ON -G "Visual Studio 16 2019" -A x64 -DURHO3D_GRAPHICS_API=D3D11 $(rbfxFolder)

    - task: NuGetCommand@2
      displayName: 'Restore rbfx dependencies'
      inputs:
        command: 'restore'
        restoreSolution: '$(buildFolder)/*.sln'

    - task: CMake@1
      displayName: 'Build Urho3D'
      inputs:
        workingDirectory: '$(buildFolder)'
        cmakeArgs: --build . --config RelWithDebInfo 
        
    - pwsh: |
        function CopyFiles {
            param ([string]$SourcePath, [string]$DestinationPath)

            New-Item -ItemType Directory -Path "$DestinationPath" -Force

            $files = Get-ChildItem $SourcePath
            foreach ($file in $files)
            {
              $fileName = Join-Path -Path $DestinationPath -ChildPath $file.Name 
              copy-item $file.FullName $fileName -Force
            }
        }
        
        # Native DLL
        CopyFiles -SourcePath $(buildFolder)/bin/RelWithDebInfo/*.exe -DestinationPath $(nugetFolder)/tools/
        CopyFiles -SourcePath $(buildFolder)/bin/RelWithDebInfo/*.dll -DestinationPath $(nugetFolder)/tools/
        # CopyFiles -SourcePath $(buildFolder)/bin/RelWithDebInfo/*.pdb -DestinationPath $(nugetFolder)/tools/
      displayName: 'Copy binary to output'

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/nuget'
        contents: 'LICENSE' 
        targetFolder: '$(nugetFolder)'
        overWrite: true

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/nuget/editor'
        contents: '**' 
        targetFolder: '$(nugetFolder)'
        overWrite: true

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(rbfxFolder)/bin/CoreData'
        contents: '**' 
        targetFolder: '$(nugetFolder)/tools/CoreData'
        overWrite: true

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(rbfxFolder)/bin/EditorData'
        contents: '**' 
        targetFolder: '$(nugetFolder)/tools/EditorData'
        overWrite: true

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/nuget'
        contents: 'unofficial.Urho3DNet.RbfxEditor.nuspec' 
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        overWrite: true

    - task: NuGetCommand@2
      inputs:
        command: 'pack'
        packagesToPack: '$(Build.ArtifactStagingDirectory)/unofficial.Urho3DNet.RbfxEditor.nuspec'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'VERSION'

    - task: NuGetCommand@2
      displayName: 'Publish to local feed'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(VstsFeed)'
        allowPackageConflicts: true

    - task: NuGetCommand@2
      displayName: 'Publish to nuget.org'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        publishFeedCredentials: 'rbfx_nuget_org'
        nuGetFeedType: 'external'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'VERSION'
        allowPackageConflicts: true