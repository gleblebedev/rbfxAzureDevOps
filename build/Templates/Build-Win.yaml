# Build project for Windows
parameters:
  configuration: 'RelWithDebInfo'

jobs:
- job: Build_Windows
  displayName: 'Build Windows'
  pool:
    vmImage: 'windows-latest'
  variables:
    rbfxFolder: $(Agent.BuildDirectory)/s/rbfx
    buildFolder: $(Agent.BuildDirectory)/s/rbfxbuild
    nugetFolder: $(Build.ArtifactStagingDirectory)/nuget

  steps:
  - checkout: self
    submodules: true
    displayName: 'Checkout project'

  - template: Add-ToolsToPath.yaml

  # - task: DotNetCoreCLI@2
  #   displayName: 'Restore'
  #   inputs:
  #     command: restore
  #     projects: 'temp/xamarin_compatibility/xamarin_compatibility.csproj'

  # - task: MSBuild@1
  #   displayName: 'test xamarin compatibility'
  #   inputs:
  #     solution: 'temp/xamarin_compatibility/xamarin_compatibility.sln'
  #     configuration: Release

  - template: Build-rbfx.yaml
    parameters:
      buildDotNet: true
      cmakeExtraArgs: -VS=15 -DURHO3D_GRAPHICS_API=D3D11
      configuration: ${{ parameters.configuration }}

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/runtimes/win-x64/native/ -Force
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/netstandard2.0/ -Force
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/netcoreapp2.1/ -Force
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/net46/ -Force
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/net47/ -Force
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/monoandroid90/ -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.dll $(nugetFolder)/runtimes/win-x64/native/Urho3D.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/Urho3D.pdb $(nugetFolder)/runtimes/win-x64/native/Urho3D.pdb -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.dll $(nugetFolder)/lib/netstandard2.0/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netstandard2.0/Urho3DNet.pdb $(nugetFolder)/lib/netstandard2.0/Urho3DNet.pdb -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netcoreapp2.1/Urho3DNet.dll $(nugetFolder)/lib/netcoreapp2.1/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/netcoreapp2.1/Urho3DNet.pdb $(nugetFolder)/lib/netcoreapp2.1/Urho3DNet.pdb -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/net46/Urho3DNet.dll $(nugetFolder)/lib/net46/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/net46/Urho3DNet.pdb $(nugetFolder)/lib/net46/Urho3DNet.pdb -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/net47/Urho3DNet.dll $(nugetFolder)/lib/net47/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/net47/Urho3DNet.pdb $(nugetFolder)/lib/net47/Urho3DNet.pdb -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/monoandroid90/Urho3DNet.dll $(nugetFolder)/lib/monoandroid90/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/monoandroid90/Urho3DNet.pdb $(nugetFolder)/lib/monoandroid90/Urho3DNet.pdb -Force
    displayName: 'Copy binary to output'

  - pwsh: |
      $path = "$(buildFolder)\Source\Urho3D\Urho3DCSharp";
      Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
        $content = Get-Content -path $path\$_ -Raw
        $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
        $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
        $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
        $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

        If ($content -ne $newContent)
        {
          Write-Host "DllImport updated in $path\$_"
          $newContent | Set-Content -Path $path\$_
        }
      }

      $path = "$(buildFolder)\Source\Urho3D\ImGuiCSharp";
      Get-ChildItem -Path $path -Filter *.cs -Recurse -Name | ForEach-Object {
        $content = Get-Content -path $path\$_ -Raw
        $newContent = $content -replace "DllImport\(\`"Urho3D", "DllImport(`"__Internal"
        $newContent = $newContent -replace "DllImportModule = \`"Urho3D\`"", "DllImportModule = `"__Internal`""
        $newContent = $newContent -replace "internal delegate System.IntPtr CreateObjectDelegate\(System.IntPtr context, uint type\);", "[ObjCRuntime.MonoNativeFunctionWrapper] `$0"
        $newContent = $newContent -replace "private static System.IntPtr CreateObject\(System.IntPtr context, uint type\)", "[ObjCRuntime.MonoPInvokeCallback (typeof (CreateObjectDelegate))] `$0"

        If ($content -ne $newContent)
        {
          Write-Host "DllImport updated in $path\$_"
          $newContent | Set-Content -Path $path\$_
        }
      }
      Remove-Item -Path "$(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10" -Recurse -Force
    displayName: 'Replace DllImport'

  - task: NuGetCommand@2
    displayName: 'Restore rbfx dependencies'
    inputs:
      command: 'restore'
      restoreSolution: '$(buildFolder)/*.sln'

  - task: MSBuild@1
    displayName: 'Build Urho3DNet for iOS'
    inputs:
      solution: '$(buildFolder)/*.sln'
      #msbuildLocationMethod: 'version' # Optional. Options: version, location
      #msbuildVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
      #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
      #msbuildLocation: # Optional
      #platform: # Optional
      configuration: ${{ parameters.configuration }}
      msbuildArguments: /p:TargetFramework=xamarin.ios10 -target:Urho3DNet
      #clean: true
      #maximumCpuCount: false # Optional
      #restoreNugetPackages: false # Optional
      #logProjectEvents: false # Optional
      #createLogFile: false # Optional
      #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic

  # - script: |
  #    msbuild /p:TargetFramework=xamarin.ios10 /p:Configuration=${{ parameters.configuration }} $(rbfxFolder)\Source\Urho3D\CSharp\Urho3DNet.csproj
  #   displayName: 'Build Urho3DNet for iOS'

  - pwsh: |
      New-Item -ItemType Directory -Path $(nugetFolder)/lib/xamarin.ios10/ -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.dll $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.dll -Force
      copy-item $(buildFolder)/bin/${{ parameters.configuration }}/xamarin.ios10/Urho3DNet.pdb $(nugetFolder)/lib/xamarin.ios10/Urho3DNet.pdb -Force
    displayName: 'Copy binary to output'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(rbfxFolder)/bin/CoreData'
      contents: '**' 
      targetFolder: '$(nugetFolder)/content/CoreData'
      overWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish game binaries'
    inputs:
      targetPath: '$(nugetFolder)'
      artifactName: 'win-nuget'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish swig'
    inputs:
      targetPath: '$(buildFolder)/bin/${{ parameters.configuration }}/swig.exe'
      artifactName: 'win-swig'
