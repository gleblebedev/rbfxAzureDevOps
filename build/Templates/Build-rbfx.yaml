# Build Urho3D rbfx fork
parameters:
  buildDotNet: true

steps:
- task: PowerShell@2
  displayName: 'Generate version environment variable'
  inputs:
    filePath: '$(Agent.BuildDirectory)/s/build/Scripts/GenVersion.ps1'
    arguments: '-versionTemplateFile $(Agent.BuildDirectory)/s/build/version.txt'

- pwsh: |
    If ($IsWindows)
    {
        "$(Agent.BuildDirectory)/s/rbfx/vcpkg/bootstrap-vcpkg.bat"
    }
    else
    {
        "$(Agent.BuildDirectory)/s/rbfx/vcpkg/bootstrap-vcpkg.sh"
    }
  displayName: 'Bootstrap vcpkg'

- script: mkdir rbfxbuild
  displayName: 'Make rbfxbuild folder'
  workingDirectory: $(Agent.BuildDirectory)/s
  failOnStderr: true

- task: CMake@1
  displayName: 'Configure Urho3D'
  inputs:
    workingDirectory: '$(Agent.BuildDirectory)/s/rbfxbuild'
    cmakeArgs: -DCMAKE_TOOLCHAIN_FILE=$(Agent.BuildDirectory)/s/rbfx/vcpkg/scripts/buildsystems/vcpkg.cmake -DBUILD_SHARED_LIBS=ON -DURHO3D_GLOW=OFF -DURHO3D_FEATURES=CSHARP;SYSTEMUI $(Agent.BuildDirectory)/s/rbfx

- task: NuGetCommand@2
  displayName: 'Restore rbfx dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '$(Agent.BuildDirectory)/s/rbfxbuild/*.sln'

- task: CMake@1
  displayName: 'Build Urho3D'
  inputs:
    workingDirectory: '$(Agent.BuildDirectory)/s/rbfxbuild'
    cmakeArgs: --build . --config Release --target Urho3D

- task: CMake@1
  displayName: 'Build Urho3DNet'
  condition: and(succeeded(), eq('${{ parameters.buildDotNet }}', true))
  inputs:
    workingDirectory: '$(Agent.BuildDirectory)/s/rbfxbuild'
    cmakeArgs: --build . --config Release --target Urho3DNet
